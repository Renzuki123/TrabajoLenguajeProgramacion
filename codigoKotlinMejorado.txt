package minesweeper

import java.util.*
import kotlin.collections.ArrayList
import kotlin.random.Random.Default.nextInt
import kotlin.system.exitProcess
import java.util.Date

class Cell() {
    var cellChar = '■'
    var marked: Boolean = false
    var opened: Boolean = false
}

class Jugador(var nickname: String, var tiempo: Float){
    // ATRIBUTOS
    var diff: String = "easy"
    var completado: Boolean = false
    var ganador: Boolean = false

    fun verInfo(){
        println("Nickname: " + nickname + "\nDificultad: " + diff +
                "\nJuegoCompletado?: " + completado + "\nGanador?: " + ganador +
                "\nTiempo: " + tiempo)
    }

    fun verTiempo(){
        println("\""+ nickname + "\" => " + tiempo)
    }
}

class GameField(val mines: Int, val field_size: Int) {
    var field = initEmptyField()
    var userIsDead = false

    fun initEmptyField(): ArrayList<Array<Cell>> {
        val field = ArrayList<Array<Cell>>()

        for (i in 0 until field_size) {
            field.add(Array<Cell>(field_size) {i -> Cell()})
        }
        return field
    }

    fun placeMines(mines: Int): ArrayList<Array<Cell>> {
        val field = initEmptyField()

        for (i in 1..mines) {
            var x = nextInt(from = 0, until = field_size)
            var y = nextInt(from = 0, until = field_size)
            while (field[y][x].cellChar != '■') {
                x = nextInt(from = 0, until = field_size)
                y = nextInt(from = 0, until = field_size)
            }
            field[y][x].cellChar = '*'
        }

        for (i in 0 until field_size) {
            for (j in 0 until field_size) {
                if (field[j][i].cellChar != '*') {
                    var minesCount = 0
                    if (j - 1 in 0 until field_size) {
                        if (i - 1 in 0 until field_size) {
                            if (field[j - 1][i - 1].cellChar == '*')
                                minesCount++
                        }
                        if (field[j - 1][i].cellChar == '*')
                            minesCount++
                        if (i + 1 in 0 until field_size) {
                            if (field[j - 1][i + 1].cellChar == '*')
                                minesCount++
                        }
                    }
                    if (j + 1 in 0 until field_size) {
                        if (i - 1 in 0 until field_size) {
                            if (field[j + 1][i - 1].cellChar == '*')
                                minesCount++
                        }
                        if (field[j + 1][i].cellChar == '*')
                            minesCount++
                        if (i + 1 in 0 until field_size) {
                            if (field[j + 1][i + 1].cellChar == '*')
                                minesCount++
                        }
                    }
                    if (i - 1 in 0 until field_size && field[j][i - 1].cellChar == '*')
                        minesCount++
                    if (i + 1 in 0 until field_size && field[j][i + 1].cellChar == '*')
                        minesCount++

                    if (minesCount in 1..8)
                    //if (minesCount) in 1 <=..<= field_size - 1)
                        field[j][i].cellChar = minesCount.toString().first()
                }
            }
        }
        return field
    }

    fun placeMinesFirstMove(mines: Int, xInit: Int, yInit: Int): ArrayList<Array<Cell>> {
        for (i in 1..mines) {
            var x = nextInt(from = 0, until = field_size)
            var y = nextInt(from = 0, until = field_size)
            while (field[y][x].cellChar == '*' || (y == yInit && x == xInit)) {
                x = nextInt(from = 0, until = field_size)
                y = nextInt(from = 0, until = field_size)
            }
            field[y][x].cellChar = '*'
        }

        for (i in 0 until field_size) {
            for (j in 0 until field_size) {
                if (field[j][i].cellChar != '*') {
                    var minesCount = 0
                    if (j - 1 in 0 until field_size) {
                        if (i - 1 in 0 until field_size) {
                            if (field[j - 1][i - 1].cellChar == '*')
                                minesCount++
                        }
                        if (field[j - 1][i].cellChar == '*')
                            minesCount++
                        if (i + 1 in 0 until field_size) {
                            if (field[j - 1][i + 1].cellChar == '*')
                                minesCount++
                        }
                    }
                    if (j + 1 in 0 until field_size) {
                        if (i - 1 in 0 until field_size) {
                            if (field[j + 1][i - 1].cellChar == '*')
                                minesCount++
                        }
                        if (field[j + 1][i].cellChar == '*')
                            minesCount++
                        if (i + 1 in 0 until field_size) {
                            if (field[j + 1][i + 1].cellChar == '*')
                                minesCount++
                        }
                    }
                    if (i - 1 in 0 until field_size && field[j][i - 1].cellChar == '*')
                        minesCount++
                    if (i + 1 in 0 until field_size && field[j][i + 1].cellChar == '*')
                        minesCount++

                    if (minesCount in 1..8)
                        field[j][i].cellChar = minesCount.toString().first()
                }
            }
        }
        openCell(xInit, yInit)
        return field
    }

    fun printWithoutMines() {
        println(" |123456|")
        println("—|—————————|")
        for (i in field.indices) {
            print("${i + 1}|")
            for (j in field[i].indices) {
                if (field[i][j].cellChar == '*')
                    print(if (field[i][j].marked) '?' else '■')
                else print(if (field[i][j].marked) '?'
                else field[i][j].cellChar)
            }
            println("|")
        }
        println("—|—————————|")
    }

    fun printFinal() {
        println(" |123456|")
        println("—|—————————|")
        for (i in field.indices) {
            print("${i + 1}|")
            for (j in field[i].indices) {
                if (field[i][j].opened) {
                    if (field[i][j].cellChar == '■')
                        print('0')
                    else
                        print(field[i][j].cellChar)
                } else if (field[i][j].marked)
                    print('?')
                else
                    print('■')
            }
            println("|")
        }
        println("—|—————————|")
    }

    fun gameIsOverAllMarked(): Boolean {
        for (i in field.indices) {
            for (j in field[i].indices) {
                if (field[i][j].cellChar == '*' && !field[i][j].marked ||
                    field[i][j].cellChar != '*' && field[i][j].marked)
                    return false
            }
        }
        return true
    }

    fun gameIsOverAllOpened(): Boolean {
        for (i in field.indices) {
            for (j in field[i].indices) {
                if (field[i][j].cellChar != '*' && !field[i][j].opened)
                    return false
            }
        }
        return true
    }

    fun openCell(x: Int, y: Int) {
        if (field[y][x].cellChar == '*') {
            userIsDead = true
            printDead()
            println("You stepped on a mine and failed!")
        } else if (field[y][x].cellChar == '■') {
            field[y][x].opened = true
            field[y][x].marked = false
            if (y - 1 in 0 until field_size) {
                if (x - 1 in 0 until field_size) {
                    if (!field[y - 1][x - 1].opened)
                        openCell(x - 1, y - 1)
                }
                if (!field[y - 1][x].opened)
                    openCell(x, y - 1)
                if (x + 1 in 0 until field_size) {
                    if (!field[y - 1][x + 1].opened)
                        openCell(x + 1, y - 1)
                }
            }
            if (y + 1 in 0 until field_size) {
                if (x - 1 in 0 until field_size) {
                    if (!field[y + 1][x - 1].opened)
                        openCell(x - 1, y + 1)
                }
                if (!field[y + 1][x].opened)
                    openCell(x, y + 1)
                if (x + 1 in 0 until field_size) {
                    if (!field[y + 1][x + 1].opened)
                        openCell(x + 1, y + 1)
                }
            }
            if (x - 1 in 0 until field_size && !field[y][x - 1].opened)
                openCell(x - 1, y)
            if (x + 1 in 0 until field_size && !field[y][x + 1].opened)
                openCell(x + 1, y)

        } else {
            field[y][x].opened = true
        }
    }

    fun printDead() {
        println(" |123456|")
        println("—|—————————|")
        for (i in field.indices) {
            print("${i + 1}|")
            for (j in field[i].indices) {
                if (field[i][j].opened && field[i][j].cellChar == '■') {
                    print(0)
                } else if (field[i][j].cellChar == '■' && field[i][j].marked) {
                    print('?')
                } else {
                    print(field[i][j].cellChar)
                }
            }
            println("|")
        }
        println("—|—————————|")
    }
}

fun crearJugador(nickname: String, tiempo: Float): Jugador{
    val jugador = Jugador(nickname, tiempo)
    return jugador
}

fun listado(diccionario: MutableMap<String, Int>) {
    for((name, end) in diccionario)
        println("$name: $end")
    println()
}

fun verRecordJugadores(arreglo: ArrayList<Jugador>){
    println("Record de jugadores que completaron el juego:")
    for(jugador in arreglo)
        println("\t" + jugador.verTiempo() + " segundos")
}

fun hallarGanador(arreglo: ArrayList<Jugador>){
    var min = 100000000.toFloat() // Suposicion de que ninguno llegara a ese tiempo
    var ganador = " "

    for(jugador in arreglo)
        if(jugador.tiempo < min){
            min = jugador.tiempo
            ganador = jugador.nickname
        }

    if(min == 100000000.toFloat()) // En caso no se registre ningun jugador
        println("No hay jugadores registrados o no hay jugadores que completaron el juego")
    else{
        println(" ========= TENEMOS UN GANADOR! ========= ")
        println("El ganador es: " + ganador + " con un tiempo: " + min + " segundos")
    }
}

fun main(args: Array<String>) {
    //val arreglo = MutableList<Jugador>{jugador.verInfo()}
    val arreglo = ArrayList<Jugador>()
    // val arregloTiempo = ArrayList<Float>()
    val arregloTiempo: MutableList<Float> = mutableListOf()
    while(true) {
        println("------ BIENVENIDO ------")
        print("Ingrese el nombre de jugador (en caso ya no juegue ponga 'stop'): ")
        var nickname = readln()

        if (nickname == "stop"){
            hallarGanador(arreglo)
            break
        }

        println("`easy`: campo 6x6 con 6 minas")
        println("Otros niveles de juego estarán disponible más adelante")
        print("Escoge la dificultad: ")

        val diff = readln()
        var minesNumber = 6 // predeterminado
        var field_size = 6 // predeterminado

        if (diff == "easy") {
            minesNumber = 1
            field_size = 6
        } else {
            println("Gracias")
            exitProcess(0)
        }

        val scanner = Scanner(System.`in`)

        val field = GameField(minesNumber, field_size)
        field.printFinal()
        print("Tipea las coordenadas de la celda que quieres chequear. " +
                "\nTipea `1 2 m` para minar (1, 2) o `1 2 f` para marcar (1, 2). " +
                "\nNota: columna y fila (NO FILA Y COLUMNA!): ")
        val begin = Date().time //calcular el tiempo
        var xInit = 0
        var yInit = 0
        var commandInit = ""
        while (commandInit != "m"){
            val tiempoBeginTipeo = Date().time // calcular el tiempo de tipeo
            xInit = scanner.nextInt()
            yInit = scanner.nextInt()
            commandInit = scanner.next()
            val tiempoEndTipeo = Date().time
            val respuesta = ((tiempoEndTipeo - tiempoBeginTipeo).toFloat() / 1000.toFloat()).toFloat()
            arregloTiempo.add(respuesta)
            if (commandInit == "f") {
                field.field[yInit - 1][xInit - 1].marked = !field.field[yInit - 1][xInit - 1].marked
                field.printFinal()
                continue
            } else if (commandInit != "m") {
                println("Unknown command.")
                continue
            }
        }
        field.field = field.placeMinesFirstMove(minesNumber, xInit - 1, yInit - 1)
        field.printFinal()

        while (!field.gameIsOverAllMarked() && !field.userIsDead && !field.gameIsOverAllOpened()) {
            print("Tipea las coordenadas de la celda que quieres chequear. " +
                    "\nTipea `1 2 m` para minar (1, 2) o `1 2 f` para marcar (1, 2) o tipea `0 0 exit` para salir. " +
                    "\nNota: columna y fila (NO FILA Y COLUMNA!): ")
            val tiempoBeginTipeo = Date().time // calcular el tiempo de tipeo
            val x = scanner.nextInt()
            val y = scanner.nextInt()
            val command = scanner.next()
            val tiempoEndTipeo = Date().time
            val respuesta = ((tiempoEndTipeo - tiempoBeginTipeo).toFloat() / 1000.toFloat()).toFloat()
            arregloTiempo.add(respuesta)
            if (command == "f") {
                if (field.field[y - 1][x - 1].opened) {
                    println("The cell is already opened.")
                    continue
                } else {
                    field.field[y - 1][x - 1].marked = !field.field[y - 1][x - 1].marked
                    field.printFinal()
                    continue
                }

            } else if (command == "m") {
                if (field.field[y - 1][x - 1].opened) {
                    println("The cell is already opened.")
                    continue
                } else if (field.field[y - 1][x - 1].marked) {
                    println("Remove mine mark from the cell before open.")
                    continue
                } else {
                    field.openCell(x - 1, y - 1)
                    if (!field.userIsDead)
                        field.printFinal()
                    continue
                }
            }
            else {
                println("Unknown command.")
                continue
            }
        }

        val end = Date().time //finaliza el tiempo
        var suma = 0.0
        for (element in arregloTiempo){
            suma += element
        }

        var tiempo = ((end - begin).toFloat() / 1000.toFloat()).toFloat()
        println("Tiempo transcurrido: " + tiempo + " segundos")
        var tiempoWrite = suma
        println("Tiempo transcurrido de write: " + tiempoWrite)
        var jugador = crearJugador(nickname, tiempo)
        if (!field.userIsDead) { // Si no esta muerto...
            println("Completaste el juego !!")
            jugador.completado = true
            arreglo.add(jugador) // Solo se añaden a los que completen el juego
            verRecordJugadores(arreglo)
        }
        var tiempoAlgoritmo = tiempo - tiempoWrite
        println("Tiempo de ejecucion de algoritmo: " +tiempoAlgoritmo )

        arregloTiempo.clear() // Esto hará que se reinicie el array
    }
}